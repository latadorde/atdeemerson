import 'package:flutter/material.dart';
import 'dart:math' as math;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tela Inicial',
      theme: ThemeData.dark().copyWith(
        primaryColor: Colors.white,
        scaffoldBackgroundColor: Colors.black,
      ),
      home: SignupScreen(),
    );
  }
}

class SignupScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // CustomPaint para desenhar as formas
          Center(
            child: CustomPaint(
              size: Size(300, 300),
              painter: CustomShapePainter(),
            ),
          ),
          SizedBox(height: 40), // Espaço entre a CustomPaint e o texto
          // Frase abaixo dos quadrados
          Text(
            'Get your Money Under Control',
            style: TextStyle(
              fontSize: 24,
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 40), // Espaço entre o texto e os botões
          // Botões centralizados na parte inferior
          ElevatedButton(
            onPressed: () {
              // Ação para Entrar com ID
            },
            child: Text('Entrar com ID'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue, // Cor do botão
              padding: EdgeInsets.symmetric(vertical: 15, horizontal: 40),
              textStyle: TextStyle(fontSize: 18),
            ),
          ),
          SizedBox(height: 20), // Espaço entre os botões
          ElevatedButton.icon(
            onPressed: () {
              // Ação para Fazer Login com Google
            },
            icon: Icon(Icons.login),
            label: Text('Fazer Login com Google'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red, // Cor do botão
              padding: EdgeInsets.symmetric(vertical: 15, horizontal: 33),
              textStyle: TextStyle(fontSize: 18),
            ),
          ),
        ],
      ),
    );
  }
}

class CustomShapePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()..style = PaintingStyle.fill;

    // Desenhar esfera no canto inferior esquerdo
    paint.color = Colors.blue;
    canvas.drawCircle(Offset(size.width * 0.44, size.height * 0.30), 25, paint);

    // Preparar para desenhar o triângulo com hipotenusa arredondada
    final double radius = 10.0; // Raio do arredondamento
    final double triangleHeight = 45.0;
    final double triangleWidth = 45.0;

    // Desenhar o triângulo com hipotenusa arredondada
    paint.color = Colors.green;
    final Path path = Path()
      ..moveTo(0, triangleHeight) // Ponto A
      ..lineTo(triangleWidth, triangleHeight) // Ponto B
      ..arcToPoint(
        Offset(triangleWidth / 2, 0),
        radius: Radius.circular(radius),
        clockwise: false,
      )
      ..lineTo(0, triangleHeight) // Voltar ao ponto A
      ..close();

    // Configuração do canvas para desenhar o triângulo
    canvas.save();
    // Posicionar o triângulo diretamente acima da esfera
    canvas.translate(
        size.width * 0.58, size.height * 0.55 - triangleHeight - -40);
    // Girar o triângulo para a esquerda (90 graus no sentido anti-horário)
    canvas.rotate(-math.pi / 0.87);
    // Desenhar o triângulo
    canvas.drawPath(path, paint);
    canvas.restore();

    // Desenhar retângulo com todos os lados arredondados ao lado das formas
    paint.color = Colors.red;
    final RRect rRect = RRect.fromRectAndRadius(
      Rect.fromLTWH(size.width * 0.53, size.height * 0.2, size.width * 0.26,
          size.height * 0.40),
      Radius.circular(22), // Arredondamento dos quatro cantos
    );
    canvas.drawRRect(rRect, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
